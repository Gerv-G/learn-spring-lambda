buildscript {
	ext {
		springBootVersion = '2.7.5'
		wrapperVersion = '1.0.29.BUILD-SNAPSHOT'
		shadowVersion = '7.0.0'
	}
	repositories {
		mavenLocal()
		mavenCentral()
		maven { url "https://repo.spring.io/snapshot" }
		maven { url "https://repo.spring.io/milestone" }
		maven { url "https://plugins.gradle.org/m2/" }
	}
	dependencies {
		classpath "gradle.plugin.com.github.jengelman.gradle.plugins:shadow:${shadowVersion}"
		classpath("org.springframework.boot.experimental:spring-boot-thin-gradle-plugin:${wrapperVersion}")
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath("io.spring.gradle:dependency-management-plugin:1.0.8.RELEASE")
		classpath("io.freefair.gradle:lombok-plugin:6.5.1")
	}
}

apply plugin: 'java'
apply plugin: "com.github.johnrengelman.shadow"
apply plugin: 'maven-publish'
apply plugin: 'org.springframework.boot'
apply plugin: 'org.springframework.boot.experimental.thin-launcher'
apply plugin: 'io.spring.dependency-management'
apply plugin: "io.freefair.lombok"

group = 'io.gerv-g'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

repositories {
	mavenLocal()
	mavenCentral()
	maven { url "https://repo.spring.io/snapshot" }
	maven { url "https://repo.spring.io/milestone" }
}

ext {
	springCloudFunctionVersion = "3.2.4"
	awsLambdaEventsVersion = "3.9.0"
	awsLambdaCoreVersion = "1.1.0"
	awsLambdaJavaRuntimeClientVersion = "2.0.0"
}
ext['reactor.version'] = "3.1.7.RELEASE"

assemble.dependsOn = [shadowJar, thinJar]

jar {
	manifest {
		attributes 'Main-Class': 'example.Config'
	}
}

import com.github.jengelman.gradle.plugins.shadow.transformers.*

/**
 * Will likely remove this in the future for the ff. reasons:
 * (1) I don't know how this works
 * (2) This won't go to production. I don't really care if I end up with a fat jar
 * (3) If I remember correctly, there's a better alternative created by Spring
 */
shadowJar {
	classifier = 'aws'
	dependencies {
		exclude(
				dependency("org.springframework.cloud:spring-cloud-function-web:${springCloudFunctionVersion}"))
	}
	// Required for Spring
	mergeServiceFiles()
	append 'META-INF/spring.handlers'
	append 'META-INF/spring.schemas'
	append 'META-INF/spring.tooling'
	transform(PropertiesFileTransformer) {
		paths = ['META-INF/spring.factories']
		mergeStrategy = "append"
	}
}

configurations {
	testCompile.extendsFrom(compileOnly)
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-function-dependencies:${springCloudFunctionVersion}"
	}
}

dependencies {
	implementation("org.springframework.boot:spring-boot-configuration-processor")
	implementation("org.springframework.cloud:spring-cloud-function-adapter-aws")
	implementation("org.springframework.cloud:spring-cloud-function-context")
	implementation("org.springframework.cloud:spring-cloud-function-web")
	implementation("org.springframework.cloud:spring-cloud-starter-function-webflux")

	compileOnly("com.amazonaws:aws-lambda-java-runtime-interface-client:${awsLambdaJavaRuntimeClientVersion}")
	compileOnly("com.amazonaws:aws-lambda-java-events:${awsLambdaEventsVersion}")
	compileOnly("com.amazonaws:aws-lambda-java-core:${awsLambdaCoreVersion}")

	testCompile('org.springframework.boot:spring-boot-starter-test')
	testImplementation('org.springframework.boot:spring-boot-starter-test')
}

tasks.named('test') {
	useJUnitPlatform()
}

task copyRuntimeDependencies(type: Copy) {
	from configurations.runtimeClasspath
	into 'build/dependency'
}

build.dependsOn copyRuntimeDependencies
